/* Edge Impulse Espressif ESP32 Standalone Inference ESP IDF Example
 * Copyright (c) 2022 EdgeImpulse Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/* Include ----------------------------------------------------------------- */
#include <stdio.h>

#include "edge-impulse-sdk/classifier/ei_run_classifier.h"

#include "driver/gpio.h"
#include "sdkconfig.h"
#include "esp_idf_version.h"

#define LED_PIN GPIO_NUM_21

static const float features[] = {
    0x9c9a95, 0x9e9a95, 0x9c9a96, 0x9c9b97, 0x9f9e9a, 0xa09f9b, 0x9e9d99, 0x9f9e9a, 0xa1a09c, 0xa3a39e, 0xa1a29d, 0xa2a39e, 0x8b8d84, 0x838579, 0x8e8e85, 0x989793, 0x989692, 0x94918c, 0x918d8a, 0x928e8b, 0x928e8b, 0x9f9c99, 0xbbbab7, 0xbfc0be, 0xbfc1be, 0xc2c3c0, 0xc6c6c1, 0xc3c2be, 0xb9b8b4, 0xb6b5b0, 0xb7b5b0, 0xb5b2ac, 0x9a9592, 0x9a9793, 0x9b9a96, 0x9a9995, 0x989793, 0x979692, 0x989793, 0x9a9996, 0x9a9997, 0x9a9a97, 0x9b9b97, 0x9c9d99, 0x898b82, 0x8a8c80, 0x94948c, 0x9b9a96, 0x959491, 0x94918d, 0x8f8b88, 0x928f8c, 0xa6a7a5, 0xbcbebc, 0xbfc2be, 0xbec0bd, 0xc0c2c0, 0xc3c3bf, 0xbcbbb6, 0xb2b1ac, 0xb0afaa, 0xb2b1ac, 0xb2b0aa, 0xa9a69f, 0x97948f, 0x979591, 0x9a9a96, 0x989793, 0x94938f, 0x91908c, 0x91908c, 0x949391, 0x959593, 0x969694, 0x969694, 0x9b9c98, 0x71726a, 0x54524a, 0x7b7b72, 0x95948f, 0x86837f, 0x817e79, 0x959593, 0xaeb1b0, 0xbcc0bf, 0xbbbfbc, 0xc1c4c1, 0xc1c3c0, 0xbcbeb9, 0xb3b4af, 0xb0afab, 0xb0afab, 0xadaba5, 0xa7a49d, 0xaca8a1, 0x9e9a91, 0x95928d, 0x94908d, 0x93928e, 0x959490, 0x93928e, 0x91908c, 0x8f8e8b, 0x91908e, 0x949490, 0x949591, 0x91918f, 0x979893, 0x646560, 0x0, 0x80706, 0xb0a08, 0x2c2b28, 0x898c88, 0xb6bcba, 0xb7bdbb, 0xbbc0bd, 0xbdc2be, 0xb8bcb7, 0xaeb1ac, 0xadafaa, 0xaeafaa, 0xa8a7a3, 0xa09f99, 0xaaa7a0, 0x9d9990, 0xafa99f, 0xd0c9bf, 0x8b8884, 0x898782, 0x878681, 0x858480, 0x85847f, 0x848380, 0x838281, 0x848482, 0x868784, 0x868784, 0x878885, 0x848683, 0x5a5b57, 0x20202, 0x10202, 0x464a49, 0x9ca4a4, 0xb2bcbb, 0xb0b7b5, 0xb6bdb9, 0xb3b9b4, 0xa7aca7, 0xa4a9a3, 0xa4a7a1, 0xa4a7a1, 0x9b9c96, 0xa7a79f, 0xa4a29a, 0xb1aca2, 0xd1cdc2, 0xd8d4c8, 0xc1bbaf, 0xb6b2ab, 0xb4b0ab, 0xb2afa9, 0xb0afa9, 0xb0afab, 0xaeada8, 0xadaeaa, 0xacadaa, 0xa6a8a4, 0xa6a8a5, 0xaaaca9, 0x9fa29f, 0x8b8f88, 0x60635e, 0x969f9d, 0xc8d3d2, 0xbcc7c5, 0xbec8c7, 0xc2ccc8, 0xb6c1bb, 0xb1b7b2, 0xadb2ad, 0xb0b5b0, 0xabb0ab, 0xadb0ab, 0xa4a59e, 0xacaba0, 0xe2dfd5, 0xdfdbd0, 0xc2beb3, 0xd8d5c9, 0xece6dc, 0xb3aca3, 0xafaba2, 0xafaca3, 0xafaba3, 0xb0ada5, 0xafada4, 0xb2afa8, 0xaeaca4, 0xa7a49a, 0xaca79f, 0xafaca3, 0xaba69e, 0xb0aba1, 0xb6b1a7, 0xb9b3aa, 0xb4aea5, 0xb4afa5, 0xb9b4aa, 0xbcb8ae, 0xbab6ae, 0xc1bdb6, 0xc1bfb7, 0xc0bfb7, 0xc0bfb7, 0xbebdb4, 0xc1bfb5, 0xbcb9ad, 0xbdb9af, 0xc3bfb4, 0xc1bdb3, 0xbbb7ad, 0xbdb7ad, 0x908981, 0x948f87, 0x918e86, 0x908d83, 0x8e8b81, 0x8e8a81, 0x8d887f, 0x8c857c, 0x8e887e, 0x90877d, 0x8c8378, 0x8d8278, 0x8f8275, 0x908175, 0x938274, 0x938172, 0x928072, 0x938274, 0x988779, 0x96877b, 0x93877b, 0x92887d, 0x90887e, 0x8d887d, 0x8e8a7f, 0x8f8b80, 0x908c81, 0x918d81, 0x8e8a7f, 0x8b877c, 0x8c887d, 0x8a867b, 0x9b948c, 0x9b968e, 0x9a978e, 0x98958c, 0x97948b, 0x969289, 0x969188, 0x948d85, 0x948c84, 0x958c83, 0x948a81, 0x94897f, 0x96897e, 0x998a7e, 0x97887c, 0x96867a, 0x9b8a7b, 0xa08e81, 0xa19083, 0x9e9084, 0x9a8f84, 0x998f85, 0x978f86, 0x938e83, 0x949086, 0x969188, 0x959086, 0x958f86, 0x918d84, 0x8e8a80, 0x8f8b80, 0x8d897e, 0x9e968f, 0x98938b, 0x9a978e, 0x99968d, 0x98958c, 0x96938a, 0x969289, 0x948d85, 0x948d85, 0x948b83, 0x948b82, 0x958a80, 0x968a7f, 0x9a8b7f, 0xb39681, 0xb69780, 0x9d8a7d, 0x9e8c7f, 0x9c8e83, 0x9c9086, 0x998c82, 0x978d84, 0x968e84, 0x918d82, 0x938e86, 0x979088, 0x969087, 0x948f86, 0x908c83, 0x8f8a81, 0x8e897e, 0x8c887d, 0x9a928b, 0x969289, 0x9a978e, 0x98958e, 0x98948d, 0x96938a, 0x949188, 0x959087, 0x958f87, 0x958d85, 0x958c82, 0x978b81, 0x93897f, 0xbf7e55, 0xef813b, 0xf99250, 0xd78b5a, 0x9f8d81, 0xcb9169, 0xb1866a, 0x958b85, 0x988c82, 0x968d84, 0x928c84, 0x948e86, 0x969188, 0x959088, 0x928f86, 0x918e85, 0x908d84, 0x908c82, 0x8d897e, 0x9d958d, 0x97938b, 0x9a9991, 0x999890, 0x999890, 0x97968e, 0x96938b, 0x959289, 0x969088, 0x958e86, 0x968d83, 0x988d84, 0x99887c, 0xb54a1a, 0xba3300, 0xd45215, 0xdb6a2b, 0xba7150, 0xd85815, 0xb26c47, 0x948f89, 0x978a80, 0x958c83, 0x938c84, 0x948e86, 0x959188, 0x939087, 0x939087, 0x908d84, 0x8f8c83, 0x908c83, 0x8e8a7f, 0xa19991, 0x97938c, 0x9b9a92, 0x9a9a92, 0x999a91, 0x97978f, 0x96958d, 0x95928b, 0x969289, 0x958f87, 0x978d86, 0x968b82, 0x96877e, 0xa94b27, 0xc64a13, 0xe07231, 0xc25d27, 0xa76a53, 0xc73b07, 0xa07764, 0x958c84, 0x958a81, 0x938b83, 0x918a82, 0x948f86, 0x949188, 0x928f86, 0x939087, 0x918e85, 0x918e85, 0x908c83, 0x8e897f, 0xa29b93, 0x939088, 0x9b9b93, 0x97978f, 0x999991, 0x999991, 0x96978e, 0x96948d, 0x96948c, 0x97928a, 0x978e87, 0x968a81, 0x968d86, 0xac6544, 0xba3f06, 0xb33201, 0xb24e28, 0xc25d32, 0xb9491f, 0x95887f, 0x95877d, 0x958a82, 0x938b84, 0x908b82, 0x928f86, 0x949188, 0x928f86, 0x928f86, 0x918e86, 0x918e85, 0x8f8c83, 0x8d887e, 0xa49c94, 0x938f86, 0x9c9c94, 0x9d9d94, 0x999991, 0x9a9b93, 0x989890, 0x97978f, 0x97948d, 0x969289, 0x968e85, 0x928b84, 0xb57a58, 0xb14310, 0xa42a03, 0xb02508, 0xd95f25, 0xec6f29, 0xa7755c, 0x968880, 0x96887e, 0x968d85, 0x958e86, 0x959087, 0x939189, 0x939089, 0x928f87, 0x928f87, 0x908d84, 0x8f8c82, 0x8f8d82, 0x8c877c, 0xa69e96, 0x908b82, 0x9e9e96, 0xa2a29a, 0x9d9e97, 0x9a9b93, 0x96968e, 0x97978f, 0x93928a, 0x928e86, 0x948d85, 0x938c85, 0xab6b4e, 0xa4441d, 0xb63708, 0xc64a0f, 0xd8682c, 0xd06021, 0xa07d69, 0x96877d, 0x958980, 0x988e86, 0x989088, 0x969188, 0x96938c, 0x94918a, 0x8f8e86, 0x908d85, 0x8f8c83, 0x8d8b80, 0x908e82, 0x8c877b, 0xaba29b, 0x908a7f, 0x9b9b90, 0xa2a298, 0x9fa098, 0x9a9b93, 0x97988f, 0x97978f, 0x94948b, 0x949188, 0x968e86, 0x938c85, 0xa06d58, 0xaf4821, 0xb22805, 0xaa2e01, 0xac3406, 0xb44613, 0x9c7864, 0x92837a, 0x94887e, 0x958c83, 0x958f86, 0x928f86, 0x939088, 0x918e86, 0x8e8b82, 0x908d84, 0x8f8c82, 0x8d8a7e, 0x8d8a7e, 0x867f73, 0xaaa39a, 0x857f73, 0x8f8d81, 0x97978c, 0x95968c, 0x94978b, 0x939489, 0x939389, 0x919187, 0x908d83, 0x90897d, 0x8d8982, 0xa66b4e, 0xb93c06, 0xaa2902, 0xa72e03, 0xad3809, 0xba4e18, 0x957461, 0x908075, 0x918579, 0x8e867c, 0x8e897f, 0x8d8980, 0x8e8b81, 0x8c897f, 0x8b897e, 0x8b887d, 0x89857a, 0x838074, 0x837e71, 0x746b5e, 0x928b82, 0x6c665a, 0x7e7b6e, 0x848577, 0x858679, 0x858579, 0x848478, 0x818175, 0x818074, 0x817d71, 0x7f786b, 0x77766b, 0x945f44, 0xb23908, 0xa72f03, 0xa93003, 0xaf3b0a, 0xba4d18, 0x8a644d, 0x766b61, 0x77695c, 0x736a5c, 0x726b5d, 0x716c5f, 0x716d60, 0x6e6a5d, 0x6f6b5e, 0x6e6a5d, 0x6a665a, 0x6b6559, 0x645d4f, 0x605649, 0xb1aea8, 0xb2afa9, 0xb2b1ab, 0xb1b1ab, 0xb1b2ac, 0xafb1ac, 0xafb1ad, 0xaeb1ad, 0xadb0ab, 0xaeb0ab, 0xacaca6, 0xaaafac, 0xae8573, 0xad3707, 0xaa3406, 0xa92f01, 0xb23c0b, 0xbf4e17, 0xd8621b, 0xb87446, 0x9c9a94, 0x9d9a93, 0x9c9a93, 0x9c9b94, 0x9c9c94, 0x999891, 0x9d9a93, 0x9e9c94, 0x8a877e, 0x757064, 0x777165, 0x736b5f, 0xd1d1cf, 0xcececc, 0xcacac9, 0xcacac9, 0xc9cac8, 0xc8cac8, 0xc6c8c6, 0xc3c8c6, 0xc2c7c6, 0xc5c9c9, 0xc5c7c7, 0xbec7ca, 0xb69e94, 0xab3807, 0xaa3205, 0xac3102, 0xb8400c, 0xc34a11, 0xee6c1c, 0xf27423, 0xc3b2a8, 0xc7cbcd, 0xc7c9c8, 0xc6c8c8, 0xc6c9c8, 0xc8cac9, 0xc8c9c8, 0xc8c8c7, 0xc3c3c1, 0xa5a39d, 0x878378, 0x858174, 0xcecdcb, 0xcccbc9, 0xcacac8, 0xcececc, 0xcdcfcb, 0xcccecc, 0xcaccc9, 0xc5c8c5, 0xcbd0cc, 0xc8ccca, 0xafb4b1, 0xb2b4b1, 0xbb7352, 0xa62b00, 0xa72b01, 0xad2e01, 0xb73907, 0xca4a0d, 0xf77d30, 0xea762f, 0xbba9a0, 0xb6b8b8, 0xc9cbc8, 0xcecfce, 0xcbcdcc, 0xcbcdcb, 0xcbccc9, 0xcacac8, 0xccccca, 0xd1d1d0, 0xbebdb9, 0xa09e96, 0xcecdcb, 0xd0d0ce, 0xd5d6d2, 0xd3d4cf, 0xcfd1cc, 0xcccec9, 0xcaccc8, 0xced0cd, 0xd9ddd9, 0xaaaea8, 0x9ba19d, 0xcd9474, 0xc84c10, 0x9f2500, 0x9a1a01, 0xa72301, 0xc54208, 0xe76517, 0xf57627, 0xd4845b, 0xd5d5d5, 0xc2c3bf, 0xa7a9a5, 0xdadcda, 0xd2d4d1, 0xd2d4d1, 0xd1d2cf, 0xd0d0ce, 0xd1d1cf, 0xd2d2cf, 0xd5d5d3, 0xd1d1cf, 0xe8e7e5, 0xedece9, 0xecede8, 0xe8e9e4, 0xe4e5e0, 0xdfe1dc, 0xdfe1de, 0xe7e9e6, 0xe6e8e5, 0xc6c8c5, 0xa29f97, 0xcd6937, 0xc1490c, 0xc44c0a, 0xca4d0c, 0xda5c14, 0xeb6d22, 0xe1631b, 0xbf5c2a, 0xcbbbb5, 0xd7d8d7, 0xbebebb, 0xcfd2d0, 0xebedec, 0xe7eae7, 0xe6e7e5, 0xe6e6e4, 0xe6e6e4, 0xe7e7e5, 0xe7e7e5, 0xe5e4e2, 0xe6e5e3, 0xf5f4f2, 0xf3f2ef, 0xf0efeb, 0xeeeeea, 0xe7e8e3, 0xe5e6e1, 0xebece9, 0xedefec, 0xe4e5e2, 0xcdcfcc, 0xc4c1bc, 0xc15e30, 0xd9560f, 0xec6a15, 0xea6916, 0xdd6019, 0xcc5214, 0xb05e38, 0xb4a09c, 0xd6d6d5, 0xd9d8d6, 0xeaeaea, 0xf1f3f2, 0xf0f2f1, 0xf2f3f3, 0xf6f6f6, 0xf3f3f3, 0xf1f1ef, 0xf4f3f1, 0xf3f2f0, 0xf3f2f0, 0xf1f0ee, 0xf3f2ef, 0xf3f2ee, 0xf0efeb, 0xeae9e5, 0xe9e8e4, 0xecebe9, 0xededeb, 0xe9e9e7, 0xebedea, 0xdcddda, 0xc1c4c0, 0xa26a4f, 0xae3602, 0xb83d06, 0xb6410f, 0xb05530, 0xb78a78, 0xc4c0be, 0xd5d5d4, 0xeeeceb, 0xefefef, 0xf0f0f0, 0xececec, 0xefefef, 0xf2f2f1, 0xf6f6f4, 0xf3f3f1, 0xf2f1ef, 0xf4f3f1, 0xf3f2f0, 0xf3f2f0, 0xf2f1ef, 0xefede9, 0xefeeea, 0xe5e4e0, 0xe8e7e3, 0xeceae7, 0xefeeec, 0xefefed, 0xeff0ee, 0xeceeeb, 0xd1d2cf, 0xcececc, 0xc6c3c0, 0xaf998f, 0xb39488, 0xbda9a0, 0xc8c6c5, 0xd0d3d2, 0xcdcbc6, 0xceccc9, 0xe7e7e5, 0xedeeed, 0xeeefee, 0xefefed, 0xf2f2f0, 0xf4f4f2, 0xf3f3f1, 0xf5f4f2, 0xf8f7f5, 0xf6f5f3, 0xf2f1ef, 0xf4f3f1, 0xf5f4f2, 0xf1eee9, 0xf5f1ed, 0xf0ece9, 0xf0efea, 0xefeeeb, 0xecebe9, 0xececea, 0xf4f4f2, 0xf0f0ee, 0xe5e7e4, 0xe9ebe8, 0xe5e6e4, 0xdadfdc, 0xdae1dd, 0xd8dcd9, 0xd3d3ce, 0xcecdc8, 0xcfceca, 0xdadad8, 0xecebea, 0xececeb, 0xeff0ee, 0xf3f3f1, 0xf3f3f1, 0xf3f3f0, 0xf5f4f2, 0xf8f7f5, 0xf6f5f3, 0xf8f7f5, 0xf7f6f4, 0xf4f4f2, 0xf3f1ef, 0xefece7, 0xf3f0eb, 0xefebe8, 0xf0efeb, 0xeeedea, 0xf1f0ee, 0xf3f3f1, 0xf2f2f0, 0xf1f1ef, 0xf0f0ee, 0xf2f4f0, 0xe4e7e4, 0xd5d6d2, 0xd5d6d0, 0xd6d6d1, 0xd7d8d2, 0xd9dad5, 0xdadbd7, 0xeeeeed, 0xf0f0ee, 0xeeeeec, 0xefefed, 0xf4f4f2, 0xf6f7f3, 0xf5f5f1, 0xf6f5f3, 0xf7f6f4, 0xf8f7f5, 0xf9f8f6, 0xf9f7f5, 0xfaf7f6, 0xf6f3f2, 0xf1eee9, 0xf1efea, 0xedebe7, 0xebeae6, 0xedece9, 0xefeeec, 0xf1f1ef, 0xf4f4f0, 0xf1f2ef, 0xf0f0ee, 0xf0f0ed, 0xe1e2df, 0xd6d8d5, 0xd7d8d4, 0xd2d5d0, 0xdcded9, 0xeeeeeb, 0xeeeeed, 0xefefed, 0xefefed, 0xf2f2ef, 0xf0f0ee, 0xf2f2f0, 0xf5f5f3, 0xf5f5f3, 0xf5f4f2, 0xf7f6f4, 0xfaf9f7, 0xfaf9f7, 0xf8f6f5, 0xfaf6f5, 0xfcf9f7, 0xfdfaf5, 0xfbfaf5, 0xfefdf9, 0xfefdfb, 0xfbfbf9, 0xf9f8f6, 0xfaf9f7, 0xfafaf8, 0xf6f6f4, 0xf6f6f4, 0xf3f3f1, 0xe2e2e0, 0xd9dbd8, 0xe1e3df, 0xd5d6d2, 0xdfdfdc, 0xeff0ec, 0xf2f2f0, 0xeff0ed, 0xeeeeec, 0xf2f2f0, 0xf4f3f2, 0xf3f3f0, 0xf7f7f4, 0xf8f6f5, 0xf7f6f4, 0xf6f5f3, 0xf9f8f6, 0xf8f7f5, 0xf8f4f3, 0xf9f5f4, 0xf9f5f4, 0x888380, 0x8a8685, 0x8f8d8b, 0x979493, 0xa8a5a4, 0xb5b4b2, 0xc2c1bf, 0xbbbab8, 0xbebebc, 0xc5c5c3, 0xd1d2d0, 0xcdcdcb, 0xc0c0be, 0xcbccca, 0xd2d2d0, 0xdbdbda, 0xebece9, 0xebebe9, 0xeeeeec, 0xf0f0ee, 0xf4f4f2, 0xf5f5f3, 0xf4f4f2, 0xf6f5f3, 0xf6f5f3, 0xf5f4f2, 0xf6f5f3, 0xfbfaf8, 0xfcfaf8, 0xfaf6f5, 0xf9f5f4, 0xfaf6f5
    // copy raw features here (for example from the 'Live classification' page)
};

void setup_led() {
#if ESP_IDF_VERSION >= ESP_IDF_VERSION_VAL(5, 0, 0)
    esp_rom_gpio_pad_select_gpio(LED_PIN);
#elif ESP_IDF_VERSION >= ESP_IDF_VERSION_VAL(4, 0, 0)
    gpio_pad_select_gpio(LED_PIN);
#endif
    gpio_set_direction(LED_PIN, GPIO_MODE_OUTPUT);
}

int raw_feature_get_data(size_t offset, size_t length, float *out_ptr) {
  memcpy(out_ptr, features + offset, length * sizeof(float));
  return 0;
}

void print_inference_result(ei_impulse_result_t result) {

    // Print how long it took to perform inference
    ei_printf("Timing: DSP %d ms, inference %d ms, anomaly %d ms\r\n",
            result.timing.dsp,
            result.timing.classification,
            result.timing.anomaly);

    // Print the prediction results (object detection)
#if EI_CLASSIFIER_OBJECT_DETECTION == 1
    ei_printf("Object detection bounding boxes:\r\n");
    for (uint32_t i = 0; i < result.bounding_boxes_count; i++) {
        ei_impulse_result_bounding_box_t bb = result.bounding_boxes[i];
        if (bb.value == 0) {
            continue;
        }
        ei_printf("  %s (%f) [ x: %u, y: %u, width: %u, height: %u ]\r\n",
                bb.label,
                bb.value,
                bb.x,
                bb.y,
                bb.width,
                bb.height);
    }

    // Print the prediction results (classification)
#else
    ei_printf("Predictions:\r\n");
    for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
        ei_printf("  %s: ", ei_classifier_inferencing_categories[i]);
        ei_printf("%.5f\r\n", result.classification[i].value);
    }
#endif

    // Print anomaly result (if it exists)
#if EI_CLASSIFIER_HAS_ANOMALY == 1
    ei_printf("Anomaly prediction: %.3f\r\n", result.anomaly);
#endif

}

extern "C" int app_main()
{
    setup_led();
    ei_sleep(100);

    ei_impulse_result_t result = { nullptr };

    ei_printf("Edge Impulse standalone inferencing (Espressif ESP32)\n");

    if (sizeof(features) / sizeof(float) != EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE)
    {
        ei_printf("The size of your 'features' array is not correct. Expected %d items, but had %u\n",
                EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, sizeof(features) / sizeof(float));
        return 1;
    }

    while (true)
    {
        // blink LED
        gpio_set_level(LED_PIN, 1);

        // the features are stored into flash, and we don't want to load everything into RAM
        signal_t features_signal;
        features_signal.total_length = sizeof(features) / sizeof(features[0]);
        features_signal.get_data = &raw_feature_get_data;

        // invoke the impulse
        EI_IMPULSE_ERROR res = run_classifier(&features_signal, &result, false /* debug */);
        if (res != EI_IMPULSE_OK) {
            ei_printf("ERR: Failed to run classifier (%d)\n", res);
            return res;
        }

        print_inference_result(result);

        gpio_set_level(LED_PIN, 0);
        ei_sleep(1000);
    }
}

